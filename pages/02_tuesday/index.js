import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
const scene = new THREE.Scene();
const aspect = window.innerWidth / window.innerHeight;
const d = 2.5;
const camera = new THREE.OrthographicCamera(-d * aspect, d * aspect, d, -d, 1, 1000);
camera.position.set(20, 10, 20);
camera.rotation.order = 'YXZ';
camera.rotation.y = -Math.PI / 4;
camera.rotation.x = Math.atan(-1 / Math.sqrt(2));
scene.background = new THREE.Color(0xffffff);
scene.position.set(0, 0, 0);
const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth / 1.5, window.innerHeight / 1.5, false);
renderer.setAnimationLoop(animate);
renderer.domElement.classList.add('threejscanvas');
document.body.appendChild(renderer.domElement);
const controls = new OrbitControls(camera, renderer.domElement);
controls.maxAzimuthAngle = Math.PI / 2;
controls.enableZoom = false;
const geometry = new THREE.BoxGeometry(1, 1, 1);
const material = new THREE.MeshBasicMaterial({ color: 0x000000 });
const cube = new THREE.Mesh(geometry, material);
const edges = new THREE.EdgesGeometry(geometry);
const edgeMaterial = new THREE.LineBasicMaterial({ color: 0xffffff, linewidth: 2 });
const edgeLines = new THREE.LineSegments(edges, edgeMaterial);
const cubeWithEdges = new THREE.Group();
cubeWithEdges.add(cube);
cubeWithEdges.add(edgeLines);
scene.add(cubeWithEdges);
camera.position.z = 5;
controls.update();
function animate() {
    // cube.rotation.y += 0.01;
    cubeWithEdges.rotation.y += 0.01;
    controls.update();
    renderer.render(scene, camera);
}
